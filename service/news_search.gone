package service

import (
	"strings"
	"unicode"

	"github.com/amecky/stocks-backend/model"
	wm "github.com/amecky/watchlist-service/model"
)

func tokenize(text string) []string {
	return strings.FieldsFunc(text, func(r rune) bool {
		// Split on any character that is not a letter or a number.
		return !unicode.IsLetter(r) && !unicode.IsNumber(r)
	})
}

func lowercaseFilter(tokens []string) []string {
	r := make([]string, len(tokens))
	for i, token := range tokens {
		r[i] = strings.ToLower(token)
	}
	return r
}

func removeLowercaseFilter(tokens []string) []string {
	r := make([]string, len(tokens))
	for _, token := range tokens {
		if len(token) > 0 && token[0] >= 'A' && token[0] <= 'Z' {
			r = append(r, token)
		}
	}
	return r
}

func removeAllLowercaseFilter(tokens []string) []string {
	r := make([]string, len(tokens))
	for _, token := range tokens {
		cnt := 0
		for i := 0; i < len(token); i++ {
			if token[i] >= 'A' && token[i] <= 'Z' {
				cnt++
			}
		}
		if cnt > 0 {
			r = append(r, token)
		}
	}
	return r
}

var stopwords = map[string]struct{}{ // I wish Go had built-in sets.
	"se": {}, "ag": {}, "inc": {}, "corp": {}, "group": {},
	"inh": {}, "kgaa": {}, "co": {}, "rg": {}, "to": {}, "Aktiengesellschaft": {}, "auf": {},
	"gesellschaft": {}, "technology": {}, "business": {}, "target": {}, "global": {}, "gmbh": {},
}

func stopwordFilter(tokens []string) []string {
	r := make([]string, 0, len(tokens))
	for _, token := range tokens {
		if _, ok := stopwords[token]; !ok {
			r = append(r, token)
		}
	}
	return r
}

func lengthFilter(tokens []string, min int) []string {
	r := make([]string, 0, len(tokens))
	for _, token := range tokens {
		if len(token) >= min {
			r = append(r, token)
		}
	}
	return r
}

type InstrumentTokens struct {
	Instrument wm.Instrument
	Tokens     []string
}

type NewsScannerService struct {
	Repo []InstrumentTokens
}

func NewNewsScannerSerivce(instruments []wm.Instrument) *NewsScannerService {
	srv := &NewsScannerService{}
	for _, i := range instruments {
		srv.Repo = append(srv.Repo, TokenizeInstrument(i))
	}
	return srv
}

func (srv *NewsScannerService) FindInstrumentsByToken(token string) []wm.Instrument {
	var ret []wm.Instrument
	for _, it := range srv.Repo {
		cnt := float64(len(it.Tokens))
		if cnt > 0.0 {
			l := 0.0
			for _, t := range it.Tokens {
				if t == token {
					l += 1.0
					//fmt.Println(t, "token", token)

				}
			}
			if l > 0.0 {
				d := l / cnt
				if d > 0.5 {
					ret = append(ret, it.Instrument)
				}
				//fmt.Println("Per", (l / cnt * 100.0))
			}

		}
	}
	return ret
}

func (srv *NewsScannerService) FindInstruments(news model.RssNews) []wm.Instrument {
	var ret []wm.Instrument
	tokens := TokenizeNews(news)
	for _, t := range tokens {
		matches := srv.FindInstrumentsByToken(t)
		for _, m := range matches {
			ret = append(ret, m)
		}
	}
	return ret
}

func TokenizeNews(news model.RssNews) []string {
	tokens := tokenize(news.Title)
	tokens = removeLowercaseFilter(tokens)
	tokens = lowercaseFilter(tokens)
	tokens = stopwordFilter(tokens)
	tokens = lengthFilter(tokens, 3)
	return tokens
}

func TokenizeText(txt string) []string {
	tokens := tokenize(txt)
	tokens = removeAllLowercaseFilter(tokens)
	tokens = lowercaseFilter(tokens)
	tokens = stopwordFilter(tokens)
	tokens = lengthFilter(tokens, 3)
	return tokens
}

func TokenizeInstrument(inst wm.Instrument) InstrumentTokens {
	tokens := TokenizeText(inst.Name)
	ret := InstrumentTokens{
		Instrument: inst,
		Tokens:     tokens,
	}
	return ret
}

/*
func FindNewsByIsin(isin string) []model.RssNews {
	inst := instruments.InstrumentsDB.FindInstrumentByISIN(isin)
	if inst != nil {
		tokens := TokenizeText(inst.Name)
		return NewsFeedDB.FindAllByTokens(tokens)
	}
	return nil
}
*/
func (i *InstrumentTokens) Matches(text string) bool {
	tokens := TokenizeText(text)
	cnt := len(i.Tokens)
	hits := 0
	for _, t := range tokens {
		for _, it := range i.Tokens {
			if t == it {
				hits++
			}
		}
	}
	return hits > 0 && hits == cnt
}

type News2Instruments struct {
	News        model.RssNews
	Instruments []wm.Instrument
}

/*
func BuildInstrumentNewsList(count int) []model.Instrument2News {
	var matches = make([]News2Instruments, 0)
	var ret = make([]model.Instrument2News, 0)
	var i2n = make(map[string]model.Instrument2News)
	instruments, _ := instruments.FindAllDaily()
	var it = make([]InstrumentTokens, 0)
	for _, i := range instruments {
		it = append(it, InstrumentTokens{
			Instrument: i,
			Tokens:     TokenizeText(i.Name),
		})
	}
	all := NewsFeedDB.FindRecentNews(500)
	for _, n := range all {
		cur := News2Instruments{
			News: n,
		}
		for _, i := range it {
			if i.Matches(n.Title) == true {
				cur.Instruments = append(cur.Instruments, i.Instrument)
			}
		}
		if len(cur.Instruments) > 0 {
			matches = append(matches, cur)
		}
	}
	for _, c := range matches {
		for _, i := range c.Instruments {
			if v, ok := i2n[i.Isin]; ok {
				v.News = append(v.News, c.News)
			} else {
				i2nItem := model.Instrument2News{
					Instrument: i,
				}
				i2nItem.News = append(i2nItem.News, c.News)
				i2n[i.Isin] = i2nItem
			}
		}
	}
	for _, v := range i2n {
		ret = append(ret, v)
	}
	return ret
}
*/
